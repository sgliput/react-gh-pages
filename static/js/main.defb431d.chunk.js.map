{"version":3,"sources":["components/picture/picture.js","components/header/header.js","components/modal/modal.js","components/modal/modal2.js","App.js","serviceWorker.js","index.js"],"names":["TomHanksPic","props","display","concat","showInput","movieProps","movies","map","movie","react_default","a","createElement","className","key","id","alt","name","src","image","onClick","handleIncrement","style","type","onKeyUp","e","handleLevel2","Header","position","counter","count","Modal","show","onHide","level2","Modal2","restart","App","state","alreadyClicked","showModal","showModal2","input","numberCorrect","_this","includes","setState","_","shuffle","push","console","log","closeModal","movieName","onkeypress","target","oldvalue","value","onkeyup","toLowerCase","border","answered","header_header","this","picture_picture","modal_modal","modal2","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.defb431d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./picture.css\";\r\n\r\nfunction TomHanksPic(props) {\r\n    //Object to set display property of input fields to either \"none\" or \"block\"\r\n    const display = {display: `${props.showInput}`};\r\n\r\n    //Maps over movie array to generate cards using values from the array elements and click events from props\r\n    const movieProps = props.movies.map(movie => (\r\n      \r\n        <div className=\"card\" key={movie.id}>\r\n            <img className=\"hanksimg card-img-top\" alt={movie.name} src={movie.image} onClick={() => props.handleIncrement(movie.id)} />\r\n            <div className=\"card-body\" style={display}>\r\n            <label>Guess the movie!</label>\r\n                <input type=\"text\" className=\"form-control\" id={movie.id} onKeyUp={(e) => props.handleLevel2(e, movie.movie, movie.id)}\r\n                />\r\n            </div>\r\n        </div>\r\n        \r\n    ));\r\n\r\n\r\n    return (\r\n        <div className=\"imgArea\">\r\n            {movieProps}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TomHanksPic;","import React from \"react\";\r\nimport \"./header.css\";\r\n\r\nfunction Header(props) {\r\n\r\n    //Object to set position property of counter to either \"fixed\" or \"absolute\"\r\n    const position = {position: props.counter};  \r\n\r\n    return (\r\n        <div className=\"jumbotron\">\r\n            <div className=\"container\">\r\n            \r\n            <h1>The Amazingly Clickable Tom Hanks!</h1>\r\n            <h3 className=\"counter\" style={position}>Correct Count: {props.count}</h3>\r\n           \r\n            <br />\r\n            <div className=\"instructions\">\r\n            <p>In this Clicky game, click on each movie picture of Tom Hanks, but only once each, to get the counter up to 15.</p>\r\n            <p>Clicking more than once will cause the game to start all over.</p>\r\n            <p>Good luck!</p>\r\n            </div>\r\n            </div>\r\n            <br /><br /><br />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./modal.css\";\r\n\r\n\r\nfunction Modal(props) {\r\n    \r\n//Object to set display property of modal to either \"none\" or \"block\"\r\nconst display = {display: `${props.show}`};\r\n\r\n    return (\r\n        <div id=\"congratsModal\" className=\"modal\" style={display}>\r\n            <div className=\"modal-content\">\r\n                <div className=\"modal-header\">\r\n                <h2>Congratulations!</h2>\r\n                    <span className=\"close\" onClick={props.onHide}>&times;</span>\r\n                    \r\n                </div>\r\n                <div className=\"modal-body\">\r\n                    <p>Well done! You clicked all of them!</p>\r\n                    <p>Tom Hanks would be proud.</p>\r\n                    <p>Want to test yourself further?</p>\r\n                    <button className=\"yes\" onClick={props.level2}>Sure</button> &nbsp; <button className=\"no\" onClick={props.onHide}>No, thanks</button> \r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Modal;","import React from \"react\";\r\nimport \"./modal.css\";\r\n\r\n\r\nfunction Modal2(props) {\r\n\r\n//Object to set display property of modal to either \"none\" or \"block\"\r\nconst display = {display: `${props.show}`};\r\n\r\n    return (\r\n        <div id=\"congratsModal2\" className=\"modal\" style={display}>\r\n            <div className=\"modal-content\">\r\n                <div className=\"modal-header\">\r\n                <h2>Congratulations!</h2>\r\n                    <span className=\"close\" onClick={props.onHide}>&times;</span>\r\n                    \r\n                </div>\r\n                <div className=\"modal-body\">\r\n                    <p>Outstanding!!</p>\r\n                    <p>You are a true Tom Hanks aficionado.</p>\r\n                    <p>Want to play again?</p>\r\n                    <button className=\"yes\" onClick={props.restart}>Sure</button> \r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Modal2;","import React, { Component } from 'react';\nimport './App.css';\nimport TomHanksPic from \"./components/picture/picture\";\nimport Header from \"./components/header/header\";\nimport Modal from \"./components/modal/modal\";\nimport Modal2 from \"./components/modal/modal2\";\nimport movies from \"./hanks.json\";\nimport _ from \"underscore\";\n\n\nclass App extends Component {\n  //Sets the current state\n  state = {\n    count: 0,\n    movies,\n    alreadyClicked: [],\n    level2: false,\n    showModal: \"none\",\n    showModal2: \"none\",\n    showInput: \"none\",\n    counter: \"fixed\",\n    input: \"\",\n    numberCorrect: 0\n  };\n\n  // handleIncrement increases this.state.count by 1 when each picture is clicked\n  handleIncrement = id => {\n    //If it is not level 2\n    if (!this.state.level2) {\n      //If the image being clicked has not already been clicked\n      if (!this.state.alreadyClicked.includes(movies[id - 1])) {\n        //And if the this.state.count is less than 14\n        if (this.state.count < 14) {\n          // Add the image being clicked to the alreadyClicked array\n          this.state.alreadyClicked.push(movies[id - 1]);\n\n          console.log(\"Already Clicked:\");\n          console.log(this.state.alreadyClicked);\n          console.log(\"Count: \" + this.state.count);\n          //Set the state for increasing count by 1 and shuffling the images using the underscore.js library's shuffle function\n          this.setState({\n            count: this.state.count + 1,\n            movies: _.shuffle(movies)\n          });\n          //If this.state.count has reached 14, reveal the congrats modal, return the counter element to the top, and set count to 15\n        } else if (this.state.count > 13) {\n          this.setState({\n            showModal: \"block\",\n            counter: \"absolute\",\n            count: 15\n          });\n\n        }\n        //If the image has already been clicked, then count is set back to 0, the alreadyClicked array is emptied, and the images are shuffled again\n      } else {\n        this.setState({\n          count: 0,\n          movies: _.shuffle(movies),\n          alreadyClicked: []\n        });\n      }\n    }\n  };\n\n  //Handles hiding both modals when their X's are clicked\n  closeModal = () => {\n    this.setState({ showModal: \"none\" });\n    this.setState({ showModal2: \"none\" });\n  }\n\n  //Handles when the first modal is closed and level 2 begins\n  level2 = () => {\n    //The input fields for each image are shown, and the modal is hidden\n    this.setState(\n      {\n        showInput: \"block\",\n        level2: true,\n        showModal: \"none\"\n      }\n    )\n  }\n\n//Handles level 2 inputs, feeding in a movie's name and id\n  handleLevel2 = (e, movieName, id) => {\n    //Splitting into two functions for onkeypress and onkeyup allows the answer to be confirmed with every real-time key press\n    onkeypress = (e) => {\n      e.target.oldvalue = e.target.value;\n    }\n\n    onkeyup = (e) => {\n      //Sets this.state.input to the input value being typed\n      this.setState({ input: e.target.value });\n      //if this.state.input is equal to the movie's name (not case-sensitive)\n      if (this.state.input.toLowerCase() === movieName.toLowerCase()) {\n        //The border fo the input turns green\n        e.target.style.border = \"5px solid green\";\n        //If the movie has not been answered before (which keeps this.state.numberCorrect from increasing when not appropriate)\n        if (!movies[id - 1].answered) {\n          //That movie image's answered value is set to true\n          movies[id - 1].answered = true;\n          //If all the movie names have not been typed correctly yet\n          if (this.state.numberCorrect < 14) {\n            //this.state.numberCorrect is increased by 1 when an answer is correct\n            this.setState({ numberCorrect: this.state.numberCorrect + 1 });\n            console.log(\"Number Correct: \" + this.state.numberCorrect);\n            //Else if all 15 answers are correct, the second modal is shown\n          } else {\n            this.setState({ showModal2: \"block\" });\n          }\n        }\n        //Else if the answer being typed is not correct yet\n      } else {\n        e.target.style.border = \"5px solid red\";\n      }\n    }\n\n\n  }\n\n  //Function for resetting everything back to the original state (when game is finished)\n  restart = () => {\n    this.setState({\n      count: 0,\n      movies: movies,\n      alreadyClicked: [],\n      level2: false,\n      showModal: \"none\",\n      showModal2: \"none\",\n      showInput: \"none\",\n      counter: \"fixed\",\n      input: \"\",\n      numberCorrect: 0\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header count={this.state.count} counter={this.state.counter} />\n\n        <TomHanksPic movies={this.state.movies} handleIncrement={this.handleIncrement} showInput={this.state.showInput} handleLevel2={this.handleLevel2} />\n        <Modal show={this.state.showModal} onHide={this.closeModal} level2={this.level2} />\n        <Modal2 show={this.state.showModal2} onHide={this.closeModal} restart={this.restart} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}